const Python = {
    "Python": [
        "print('Hello World')", 
        "for i in range(10):", 
        "    print(i)",
        "def soma(a, b):", 
        "    return a + b",
        "class Pessoa:", 
        "    def __init__(self, nome):",
        "        self.nome = nome",
        "import os",
        "import pandas as pd",
        "if __name__ == '__main__':",
        "import numpy as np",
        "from datetime import datetime",
        "import requests",
        "import json",
        "import sqlite3",
        "from flask import Flask, render_template",
        "app = Flask(__name__)",
        "@app.route('/')",
        "def index():",
        "    return 'Hello Flask!'",
        "with open('arquivo.txt', 'r') as f:",
        "    conteudo = f.read()",
        "try:",
        "    resultado = 10 / 0",
        "except ZeroDivisionError:",
        "    print('Erro: Divisão por zero')",
        "lambda x: x * 2",
        "list_comprehension = [x**2 for x in range(10)]",
        "dict_comprehension = {x: x**2 for x in range(5)}",
        "import matplotlib.pyplot as plt",
        "plt.plot([1, 2, 3, 4])",
        "plt.show()",
        "from sklearn.linear_model import LinearRegression",
        "model = LinearRegression()",
        "async def fetch_data():",
        "    return await get_response()",
        "yield x",
        "def generator():",
        "    for i in range(10):",
        "        yield i",
        "import threading",
        "thread = threading.Thread(target=funcao)",
        "thread.start()"
    ]
}
const Cpp = {
    "C++": [
        "#include <iostream>", 
        "#include <vector>",
        "#include <string>",
        "#include <algorithm>",
        "#include <memory>",
        "#include <fstream>",
        "#include <map>",
        "#include <set>",
        "#include <queue>",
        "#include <stack>",
        "using namespace std;",
        "int main() {", 
        "    cout << \"Hello World\" << endl;",
        "    return 0;",
        "}",
        "std::cout << \"Hello\";", 
        "for(int i=0; i<10; i++) {",
        "    cout << i << endl;",
        "}",
        "while(condition) {",
        "    // código",
        "}",
        "return 0;",
        "class Pessoa {",
        "private:",
        "    string nome;",
        "    int idade;",
        "public:",
        "    Pessoa(string n, int i) : nome(n), idade(i) {}",
        "    void mostrarInfo() const;",
        "    ~Pessoa();",
        "};",
        "template<typename T>",
        "T max(T a, T b) {",
        "    return (a > b) ? a : b;",
        "}",
        "std::vector<int> numeros = {1, 2, 3, 4, 5};",
        "std::map<string, int> mapa;",
        "mapa[\"chave\"] = 42;",
        "auto lambda = [](int x) { return x * 2; };",
        "std::shared_ptr<int> ptr = std::make_shared<int>(10);",
        "std::unique_ptr<int> unique = std::make_unique<int>(20);",
        "try {",
        "    throw std::runtime_error(\"Erro!\");",
        "} catch(const std::exception& e) {",
        "    std::cerr << e.what() << std::endl;",
        "}",
        "std::thread t(funcao);",
        "t.join();",
        "std::mutex mtx;",
        "std::lock_guard<std::mutex> lock(mtx);"
    ]
}
const Java = {
    "Java": [
        "public class Main {", 
        "    public static void main(String[] args) {",
        "        System.out.println(\"Hello World\");",
        "    }",
        "}",
        "System.out.println(\"Hello\");", 
        "for(int i=0; i<10; i++) {",
        "    System.out.println(i);",
        "}",
        "while(condition) {",
        "    // código",
        "}",
        "private int idade;", 
        "public static void main(String[] args) {",
        "public class Pessoa {",
        "    private String nome;",
        "    private int idade;",
        "    public Pessoa(String nome, int idade) {",
        "        this.nome = nome;",
        "        this.idade = idade;",
        "    }",
        "    public String getNome() {",
        "        return this.nome;",
        "    }",
        "    public void setNome(String nome) {",
        "        this.nome = nome;",
        "    }",
        "}",
        "import java.util.*;",
        "import java.io.*;",
        "import java.net.*;",
        "import java.time.*;",
        "List<String> lista = new ArrayList<>();",
        "Map<String, Integer> mapa = new HashMap<>();",
        "Set<Integer> conjunto = new HashSet<>();",
        "try {",
        "    // código que pode gerar exceção",
        "} catch (Exception e) {",
        "    e.printStackTrace();",
        "} finally {",
        "    // código de limpeza",
        "}",
        "@Override",
        "public String toString() {",
        "    return \"Pessoa{nome='\" + nome + \"'}\";",
        "}",
        "interface Comparable<T> {",
        "    int compareTo(T other);",
        "}",
        "public abstract class Animal {",
        "    protected abstract void makeSound();",
        "}",
        "Stream.of(1, 2, 3, 4, 5)",
        "    .filter(x -> x > 2)",
        "    .map(x -> x * 2)",
        "    .collect(Collectors.toList());",
        "Optional<String> optional = Optional.of(\"valor\");",
        "CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> \"resultado\");"
    ]
}
const Javascript = {
    "Javascript": [
        "console.log('Hello World');", 
        "for(let i=0; i<10; i++) {",
        "    console.log(i);",
        "}",
        "while(condition) {",
        "    // código",
        "}",
        "function soma(a, b) {", 
        "    return a + b;",
        "}",
        "const arrow = (a, b) => a + b;",
        "let x = 10;", 
        "const y = 'texto';",
        "var z = true;",
        "class Pessoa {",
        "    constructor(nome, idade) {",
        "        this.nome = nome;",
        "        this.idade = idade;",
        "    }",
        "    falar() {",
        "        return `Olá, eu sou ${this.nome}`;",
        "    }",
        "}",
        "const array = [1, 2, 3, 4, 5];",
        "array.forEach(item => console.log(item));",
        "array.map(item => item * 2);",
        "array.filter(item => item > 2);",
        "array.reduce((acc, item) => acc + item, 0);",
        "const obj = { nome: 'João', idade: 25 };",
        "const { nome, idade } = obj;",
        "const novoObj = { ...obj, cidade: 'São Paulo' };",
        "async function fetchData() {",
        "    try {",
        "        const response = await fetch('/api/data');",
        "        const data = await response.json();",
        "        return data;",
        "    } catch (error) {",
        "        console.error('Erro:', error);",
        "    }",
        "}",
        "const promise = new Promise((resolve, reject) => {",
        "    setTimeout(() => resolve('Sucesso!'), 1000);",
        "});",
        "document.getElementById('elemento');",
        "document.querySelector('.classe');",
        "element.addEventListener('click', (e) => {",
        "    e.preventDefault();",
        "});",
        "localStorage.setItem('key', 'value');",
        "const data = JSON.parse(localStorage.getItem('key'));",
        "fetch('/api/endpoint')",
        "    .then(response => response.json())",
        "    .then(data => console.log(data));",
        "const regex = /[a-zA-Z]+/g;",
        "const match = text.match(regex);",
        "setTimeout(() => console.log('Executado!'), 1000);",
        "setInterval(() => console.log('Repetindo...'), 2000);",
        "const module = require('fs');",
        "import { useState, useEffect } from 'react';",
        "export default function Component() {",
        "    const [state, setState] = useState(0);",
        "    return <div>{state}</div>;",
        "}"
    ]
}

export { Python, Cpp, Java, Javascript }